:toc:

:toclevels: 3

Related: https://github.com/red/red/wiki/%5BHOWTO%5D-How-Do-I-Do-X-with-Red%3F[[HOWTO\]-How-Do-I-Do-X-with-Red?]

== Files and directories

=== Selecting a directory

`request-dir` displays a dialogue for the user to select a directory. Returns full directory path. You can set the starting directory with `/dir` refinement:

---- 
doc-dir: request-dir/dir %/C/Users/Owner/Documents/
---- 

You can set the title of the dialogue with `/title` refinement and provide a string for its `text` argument.

=== Selecting a file

Similarly, you can use `request-file` to select a file. You can set a default file or directory with `/file` refinement. Provide filters with `/filters`. The argument to this refinement is a block of name (`string!`) and type (`file!` or `string!`) pairs.

---- 
>> request-file/file/filter %"/C/Red-lang/Rededitor-11/examples/" ["red" %*.red]
== %"/C/Red-lang/Rededitor-11/examples/7- Draw/71 - Draw demo.red"
---- 

The `/multi` refinement of `request-file` allows multiple file selection, the results are returned as a block.

=== Reading from a file

---- 
== file: %README.md
>> read file
== {Red Programming Language^/------------------------^/^/**Red** is a new programming lan...
---- 

`read` takes an argument (`source`) of type `file!`, `url!` or `port!` and reads the contents of the source. If the source is a directory, `read` returns a block of elements of `file!` type.

---- 
>> red-master: %"/D/red-master/"
== %/D/red-master/
>> red-files: read red-master
== [%.appveyor.yml %.editorconfig %.gitattributes-sample %.github/ %.gitignore-sample %...
>> foreach file red-files[print [file "->" either dir? file["dir"]["file"]]]
.appveyor.yml -> file
.editorconfig -> file
.gitattributes-sample -> file
.github/ -> dir
.gitignore-sample -> file
.travis.yml -> file
boot.red -> file
bridges/ -> dir
BSD-3-License.txt -> file
BSL-License.txt -> file
build/ -> dir
CODE_OF_CONDUCT.md -> file
compiler.r -> file
CONTRIBUTING.md -> file
docs/ -> dir
environment/ -> dir
lexer.r -> file
libRed/ -> dir
modules/ -> dir
quick-test/ -> dir
README.md -> file
red.r -> file
run-all.r -> file
runtime/ -> dir
system/ -> dir
tests/ -> dir
usage.txt -> file
utils/ -> dir
version.r -> file
---- 

=== Read/lines

If we are reading from a text file, it makes sense to be able to get the file content as separate lines. We can first read the file and split the string on `newline`. `read` provides a refinement `/lines` that splits the text on `newline` and thus returns a block of strings.

---- 
>> usage: read/lines %/D/red-master/usage.txt
== ["" "Usage: red [command] [options] [file]" "" {[file]: any Red or Red/System source...
>> length? usage
== 95
---- 

=== Reading binary files

When the file we want to read does not consist of ASCII characters, we need to read it as a binary file. We use the `/binary` refinement with `read`:


---- 
>> bin: read/binary %/D/red-master/usage.txt
== #{
0A55736167653A20726564205B636F6D6D616E645D205B6F7074696F6E735D20
5B66696C655D0A0A...
>> length? bin
== 4460
>> to string! copy/part bin 60
== {^/Usage: red [command] [options] [file]^/^/[file]: any Red or R}
---- 

You can start reading from specific position in a file with `/seek` refinement and limit the length of the content that is read with `/part`.

As you might have observed, in Red you don’t need to open the file in advance and indicate the reading mode, as you do in Python:

---- 
>>> red_usage = open('D:/red-master/usage.txt', 'r')
>>> lines = red_usage.readlines()
>>> len(lines)
95
>>> lines[1]
'Usage: red [command] [options] [file]\n'
---- 

=== Reading from URL

Reading from web is just as easy as reading a local file:

---- 
>> red-about: read https://www.red-lang.org/p/about.html
== {<!DOCTYPE html>^/<html class='v2' dir='ltr' xmlns='http://www.w3.org/1999/xhtml' xml...
---- 

=== Writing to a file

Red uses `write` to  write data into file, url or other port. The format is following:

`write destination data`, where `destination` can be `file!`, `url!` or `port!`. `data` can be of any type.

---- 
>> block:  [1 2 3.4 "Four" [5 6 7] print "Hello"]
== [1 2 3.4 "Four" [5 6 7] print "Hello"]
>> write %block.txt block
>> read %block.txt
== {[1 2 3.4 "Four" [5 6 7] print "Hello"]}
----

We can append data at the end of an existing file using the `/append` refinement of `write:

---- 
>> write/append %block.txt " ; some text"
>> read %block.txt
== {[1 2 3.4 "Four" [5 6 7] print "Hello"] ; some text}
---- 

You can write at a specific position in a file using `/seek` - just don’t forget that this way you overwrite the existing data.

When the data you write to a file is Red code, it’s better for you to use `save` instead of `write`.  `save` removes the enclosing brackets. The code written to a file with `save` can be executed with simple call to `do`.

---- 
loop-code: [
Red [] 
    n: 5 
    loop n [
        print "Hello world!"
    ] 
]
save %loop-code.red loop-code
---- 
 
---- 
>> do %loop-code.red
Hello world!
Hello world!
Hello world!
Hello world!
Hello world!
---- 

=== Write/lines

You can write each value in a block as a separate line in a file using the `/lines` refinement:

---- 
colors: ["red" "orange" "yellow" "green" "blue" ["indigo" "violet"]]
write/lines %colors.txt colors
---- 

The file `colors.txt` will look like this:

---- 
red
orange
yellow
green
blue
["indigo" "violet"]
---- 

=== Writing as a binary file

When you need to write your data as a binary file, use the `/binary` refinement – it preserves the contents exactly.

You can use `save`  with refinement `/as` to save an image created within Red as a graphics file (bmp, gif, jpeg or png):

---- 
>> img: make image! [200x200 255.255.255]
== make image! [200x200 #{
    FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    FFFFFFFFFFFFFFFFFFFFFFFFFFF...
>> img: draw img[pen sky line-width 3 circle 100x100 80]
== make image! [200x200 #{
    FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF
    FFFFFFFFFFFFFFFFFFFFFFFFFFF...
>> save/as %circle.png img 'png
---- 
 
We create an image `img` with dimensions 200x200 pixels and white background. We then draw a circle with radius 80 centered at 100x100. (You can see the image directly from Red GUI console by typing `? (img)`). We finally save the image as .png file titled `circle.png`.

== JSON/CSV

=== load-json

Red’s `load-json` function converts a JSON string to Red data.  Suppose you have the following json data, saved in `sample2.json` file:

---- 
{
   "firstName": "Joe",
   "lastName": "Jackson",
   "gender": "male",
   "age": 28,
   "address": {
       "streetAddress": "101",
       "city": "San Diego",
       "state": "CA"
   },
   "phoneNumbers": [
       { "type": "home", "number": "7349282382" }
   ]
}
---- 
 
We can read the file contents and apply `load-json` to the string:

---- 
>> sample: load-json read %sample2.json
== #(
    firstName: "Joe"
    lastName: "Jackson"
    gender: "male"
    age: 28
    address: #(
        streetAddress: ...
>> probe sample
#(
    firstName: "Joe"
    lastName: "Jackson"
    gender: "male"
    age: 28
    address: #(
        streetAddress: "101"
        city: "San Diego"
        state: "CA"
    )
    phoneNumbers: [#(
        type: "home"
        number: "7349282382"
    )]
)
---- 

As you see, the result is a map, populated by key-value pairs of data from the .json file

=== to-json

=== load-csv

=== to-csv

== Working with dates

== Images
