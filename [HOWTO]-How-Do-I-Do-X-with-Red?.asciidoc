__This is intended to be a collaborative list of how to perform common programming tasks with Red.__


### Input and Output (IO)

'''

Printing stuff

* Print a value followed by a newline - `print`

```red
>> print "Hello Red"
Hello Red
```

```red
>> print ["2 x 2 =" 2 * 2]
2 x 2 = 4
```

* Print a word and the value it refers to - `??`

```red
>> n: 42
== 42

>> ?? n
n: 42
```

* Print something and return its value - `probe`

```red
>> probe n
42
== 42

```

Reading stuff

* Get console user input - `input`

```red
>> i: input   ; set i to the value returned from the input function

hi
== "hi"
```

```red
>> i
== "hi"
```

* Get console user input with a prompt -  `ask`

```red
>> i: ask "Who are you? "
Who are you? ME
== "ME"
```

* Read from a file, or url

```red 
>> read %day1.txt
== {1810^/1729^/1857^/1777^/1927^/1936^/1797^/1719^/1703^/1758^/1768^/2008^/1963^/1925^/1919^/...
```

```red
>> read %Downloads/
== [%jdk-15.0.1_linux-x64_bin.deb %20201104_003631.jpg %20201107_105256.jpg %Ge...
```
```red
>> read https://www.red-lang.org/p/getting-started.html
== {<!DOCTYPE html>^/<html class='v2' dir='ltr' xmlns='http://www.w3.org/1999/xh...

```

* Read a specific line from a file - `read/lines`, `pick`

```red
>> pick read/lines %day1.txt 42
== "1912"
```

`help read` in the Red console.

```red
> help read
USAGE:
     READ source

DESCRIPTION: 
     Reads from a file, URL, or other port. 
     READ is an action! value.

ARGUMENTS:
     source       [file! url!] 

REFINEMENTS:
     /part        => Partial read a given number of units (source relative).
        length       [number!] 
     /seek        => Read from a specific position (source relative).
        index        [number!] 
     /binary      => Preserves contents exactly.
     /lines       => Convert to block of strings.
     /info        => 
     /as          => Read with the specified encoding, default is 'UTF-8.
        encoding     [word!] 
```

Writing stuff

* Write to a File or URL

```red
>> write %Hi.adoc "### Hello"
```
```red
>> my-asciidoc: {
{    '''
{    * Write to a file
{    
{    ```red
{    write %Hi.adoc "### Hello"
{    ```
{    }
== {^/'''^/* Write to a file^/^/```red^/write %Hi.adoc "### Hello"^/```^/}
```
```red
>> write/append %Hi.adoc my-asciidoc
```

`help write` in the Red console.

```red
>> help write
USAGE:
     WRITE destination data

DESCRIPTION: 
     Writes to a file, URL, or other port. 
     WRITE is an action! value.

ARGUMENTS:
     destination  [file! url! port!] 
     data         [any-type!] 

REFINEMENTS:
     /binary      => Preserves contents exactly.
     /lines       => Write each value in a block as a separate line.
     /info        => 
     /append      => Write data at end of file.
     /part        => Partial write a given number of units.
        length       [number!] 
     /seek        => Write at a specific position.
        index        [number!] 
     /allow       => Specifies protection attributes.
        access       [block!] 
     /as          => Write with the specified encoding, default is 'UTF-8.
        encoding     [word!] 
```

Interogating stuff

* Get the current directory

```red
>> what-dir
== %/home/gt/
```

* List the contents of the current directory

```red
> list-dir %Downloads/
	jdk-15.0.1_linu...  	20201104_003631...  	20201107_105256...  
	Get_Programming...  
```

```red
>> list-dir what-dir
	Pictures/           	.themes/            	tmp/                
	.profile            	red                 	.lazarus/           
	.gtkrc-xfce         	email               	HowDo.adoc          
	pm-tup.hs           	.sudo_as_admin_...  	Documents/    
```

`help list-dir` in the Red console.

```red
>> help list-dir
USAGE:
     LIST-DIR dir

DESCRIPTION: 
     Displays a list of files and directories from given folder or current one. 
     LIST-DIR is a function! value.

ARGUMENTS:
     dir          [any-type!] "Folder to list."

REFINEMENTS:
     /col         => Forces the display in a given number of columns.
        n            [integer!] "Number of columns."
```

* Get file size - `size?`

```red
>> size? %input.txt
== 39244

>> size? %/c/input.txt
== 39244
```

* Check if a file exists - `exists?`

```red
> exists? %day1.txt
== true

>> exists? %some-file.txt
== false
```


'''
### Graphics (VID and View)

* Make basic editor

```red
view/options/flags [
	title "Basic Editor"
	editor: area 800x600 on-change [face/parent/actors/saved?: no]
][
	menu: ["File" ["Open" open "Save" save "Quit" quit]] 
	actors: object [
		on-menu: func [face event][
			switch event/picked [
				open [
					if file: request-file [
						editor/text: read file
						face/text: form file
					]
				] 
				save [
					file: any [file "New"]
					if file: request-file/save/file file [
						write file editor/text 
						saved?: yes
					]
				] 
				quit [check-saving]
			]
		]
		on-close: does [check-saving]
		on-resizing: func [face event][
			editor/size: face/size - 20
		]
		on-resize: func [face event][on-resizing face none]
		check-saving: does [either saved? [unview][confirm unview]] ; or `quit` but this kills console too
		saved?: yes 
		file: none 
		confirm: does [
			view [
				title "Confirm"
				text "Save file?" return 
				button "Yes" [
					file: any [file "New"]
					if file: request-file/save/file file [
						write file editor/text
					]
					unview
				] 
				button "No" [unview]
			]
		]
	]
] 'resize
```

* Add examples...

'''

### TBD

* Install Red: https://www.red-lang.org/p/download.html

- Use the REPL, play with Red, try red
- Write a function
- Include type specs for function args
- Define an array/map/struct
- Specify a datatype for a variable
- Create an OOP class
- Inherit from an object
- Implement an OO interface
- Create private/protected members in an object
- Find out what methods an object or datatype supports
- Find out what datatypes are available in Red, and how to use them
- Enforce immutability
- Pass values by reference or by value to functions
- Create a lambda/anonymous function
- Get the name of the function being called
- Read and write files
- Make HTTP requests (read URLs)
- Access an API that uses JSON
- Use command line arguments to Red scripts
- Call/launch other programs, including redirecting I/O
- Call C functions in DLLs
- Compile and cross compile
- Import a library, load a module, use a package manager
- Create a GUI
- Set the title for a GUI window
- Set the icon for an EXE
- Use HTML in a Red GUI
- Write Javascript code in Red
- Include a web-browser component in a Red GUI
- Do machine learning
- Use regular expressions
* Split a string - `split`
```red
>> split "abc,def,gh" #","
== ["abc" "def" "gh"]

>> split "Hello Red" space
== ["Hello" "Red"]
```

`help split` in the Red console.

```red
>> help split
USAGE:
     SPLIT series dlm

DESCRIPTION: 
     Break a string series into pieces using the provided delimiters. 
     SPLIT is a function! value.

ARGUMENTS:
     series       [any-string!] 
     dlm          [string! char! bitset!] 

```
- Parse a string
